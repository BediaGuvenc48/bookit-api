buildscript {
    ext {
        kotlin_version = '1.1.51'
        spek_version = '1.1.5'
        junit_version = '5.0.1'
        junit_gradle_version = '1.0.1'
        expekt_version = '0.5.0'
        hamkrest_version = '1.4.2.0'
        springfox_version = '2.7.0'
        jackson_version = '2.9.0'
        h2_version = '1.4.196'
        mockito_kotlin_1_1 = '1.5.0'
        mysql_version='5.1.6'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.junit.platform:junit-platform-gradle-plugin:$junit_gradle_version")
        classpath 'com.kncept.junit5.reporter:junit-reporter:1.0.0'
    }
}

plugins {
    id 'org.springframework.boot' version '1.5.8.RELEASE'
    id 'org.jetbrains.kotlin.jvm' version '1.1.51'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.1.51'
    id "org.jetbrains.kotlin.plugin.allopen" version "1.1.51"
    id 'org.jmailen.kotlinter' version '1.4.0'
//    id 'com.gorylenko.gradle-git-properties' version '1.4.17'
    id "io.gitlab.arturbosch.detekt" version "1.0.0.RC4-3"
}

repositories {
    maven { url 'https://jitpack.io' }
}


apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'com.kncept.junit5.reporter'

group = 'com.buildit'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

sourceSets {
    'test-e2e' {
        kotlin {
            srcDir files('src/test-e2e/kotlin')
        }
        resources.srcDir files('src/test-e2e/resources')
    }
}

idea {
    module {
        testSourceDirs += files('src/test-e2e/kotlin')
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

repositories {
    mavenCentral()
}

springBoot {
    buildInfo()
}

configurations {
    testE2eCompile.extendsFrom testCompile
    testE2eRuntime.extendsFrom testRuntime
}

detekt {
    profile("main") {
        input = "$projectDir/src"
        config = "$projectDir/detekt.yml"
        output = "$buildDir/reports/detekt"
    }
}

check.dependsOn detektCheck

junitPlatform {
    platformVersion junit_gradle_version
}

afterEvaluate {
    jacoco {
        applyTo junitPlatformTest
        toolVersion = "0.7.9"
    }

    task junit5CodeCoverageReport(type:JacocoReport){
        executionData junitPlatformTest
        sourceSets sourceSets.main
        sourceDirectories = files(project.sourceSets.main.allSource.srcDirs)
        classDirectories = files(files(project.sourceSets.main.output).collect {
            fileTree(dir: it, exclude: [
                '**/dto'
            ])
        })
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }

    task junit5CodeCoverageVerification(type:JacocoCoverageVerification){
        executionData junitPlatformTest
        sourceSets sourceSets.main
        sourceDirectories = files(project.sourceSets.main.allSource.srcDirs)
        classDirectories = files(files(project.sourceSets.main.output).collect {
            fileTree(dir: it, exclude: [
                '**/dto'
            ])
        })
        violationRules {
            rule {
                limit {
                    minimum = 0.60
                }
            }
        }
    }

    test.dependsOn junit5CodeCoverageReport
    // can't really enforce this until we have a way to ignore data classes and the things they generate
    // https://github.com/jacoco/jacoco/issues/552
    check.dependsOn junit5CodeCoverageVerification
}


dependencies {
    compile("org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version")
    compile("org.jetbrains.kotlin:kotlin-reflect:$kotlin_version")

    //spring boot
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-actuator-docs')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')

    // for kotlin data classes
    compile("com.fasterxml.jackson.module:jackson-module-kotlin:$jackson_version")
    compile("com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$jackson_version")
    compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jackson_version")

    // swagger
    compile("io.springfox:springfox-swagger2:$springfox_version")
    compile("io.springfox:springfox-bean-validators:$springfox_version")
    compile("io.springfox:springfox-swagger-ui:$springfox_version")

    //database
    compile("com.h2database:h2:$h2_version")
    compile("mysql:mysql-connector-java:$mysql_version")

    compileOnly('org.springframework.boot:spring-boot-configuration-processor')

    runtime('org.springframework.boot:spring-boot-devtools')

    testCompile('junit:junit')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.springframework.restdocs:spring-restdocs-mockmvc')
    testCompile("com.winterbe:expekt:$expekt_version")
    testCompile("org.jetbrains.spek:spek-api:$spek_version")
    testCompile("org.junit.jupiter:junit-jupiter-api:$junit_version")
    testCompile("com.natpryce:hamkrest:$hamkrest_version")
    testCompile("com.nhaarman:mockito-kotlin-kt1.1:$mockito_kotlin_1_1")
    testCompile("com.github.sbrannen:spring-test-junit5:1.0.0")

    testRuntime("org.junit.jupiter:junit-jupiter-engine:$junit_version")
    testRuntime("org.junit.platform:junit-platform-console:$junit_gradle_version")
    testRuntime("org.jetbrains.spek:spek-junit-platform-engine:$spek_version")
}


// https://stackoverflow.com/questions/45297339/junit-5-under-gradle-with-multiple-source-sets
task 'test-e2e'(
    type: JavaExec,
    description: 'Runs the e2e tests.',
    group: 'Verification'
) {
    dependsOn testE2eClasses

    outputs.upToDateWhen { false }
    classpath = sourceSets.'test-e2e'.runtimeClasspath

    main = 'org.junit.platform.console.ConsoleLauncher'
    args = ['--scan-class-path',
            sourceSets.'test-e2e'.output.getClassesDirs().asPath,
            '--reports-dir', "${buildDir}/test-results/test-e2e"]
}

